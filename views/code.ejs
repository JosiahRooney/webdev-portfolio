<% include partials/header %>

    <div class="code banner">

        <div class="container">

            <h1><i class="fa fa-flask" aria-hidden="true"></i> Code <small>It's all talk until the code runs</small></h1>

            <p class="lead">Here are some examples of my code. This allows you to get a feel for what my indentation and formatting preferences are, which is probably a deal breaker for some (2 spaces &gt; tabs).</p>

            <ul class="nav nav-tabs" role="tablist">
                <li role="presentation" class="active"><a href="#projects" aria-controls="projects" role="tab" data-toggle="tab">Code Projects</a></li>
                <li role="presentation"><a href="#basic" aria-controls="basic" role="tab" data-toggle="tab">Basic Algorithms</a></li>
                <li role="presentation"><a href="#intermediate" aria-controls="intermediate" role="tab" data-toggle="tab">Intermediate Algorithms</a></li>
                <li role="presentation"><a href="#advanced" aria-controls="advanced" role="tab" data-toggle="tab">Advanced Algorithms</a></li>
                <li role="presentation"><a href="#misc" aria-controls="misc" role="tab" data-toggle="tab">Misc/Fun Code</a></li>
            </ul><!-- .nav.nav-tabs -->

            <div class="code-blocks tab-content">

                <div role="tabpanel" class="tab-pane active" id="projects">

                    <script async src="//assets.codepen.io/assets/embed/ei.js"></script>

                    <div class="tab-header">
                        <p>These are some projects I've completed on Codepen and other sites.</p>
                    </div>

                    <div class="code-block well row">
                        <h3>Redactor - Chrome Extension</h3>
                        <p>A Chrome extension to block certain words from your internet browsing experience. Uses Chrome browser sync.</p>
                        <p>Redactor in the <a href="https://chrome.google.com/webstore/detail/redactor/jefepejbglgdnkfnmoocffncgailfboh?hl=en" target="_blank">Chrome Web Store</a> and on <a href="https://github.com/JosiahRooney/Redactor" target="_blank">Github</a></p>
                        <img class="well" src="/static/img/screenshot.jpg" alt="">
                    </div>

                    <div class="code-block well row">
                        <h3>Wikipedia Search Tool</h3>
                        <p>This project uses the Wikipedia search API to serve up the 10 most relevant results based on a query.</p>
                        <p data-height="610" data-theme-id="0" data-slug-hash="KrAZpx" data-default-tab="result" data-user="Chaosrock" data-embed-version="2" data-preview="true" class="codepen">See the Pen <a href="http://codepen.io/Chaosrock/pen/KrAZpx/">Wikipedia Search Tool</a> by Josiah (<a href="http://codepen.io/Chaosrock">@Chaosrock</a>) on <a href="http://codepen.io">CodePen</a>.</p>
                    </div>

                    <div class="code-block well row">
                        <h3>Weather App</h3>
                        <p>This little application uses the openweathermap.org API to provide weather data based on your IP address location.</p>
                        <p data-height="405" data-theme-id="0" data-slug-hash="YWRqqk" data-default-tab="result" data-user="Chaosrock" data-embed-version="2" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/Chaosrock/pen/YWRqqk/">YWRqqk</a> by Josiah (<a href="http://codepen.io/Chaosrock">@Chaosrock</a>) on <a href="http://codepen.io">CodePen</a>.</p>
                    </div>

                    <div class="code-block well row">
                        <h3>Calculator</h3>
                        <p>This is a basic calculator built in JavaScript using MathJS.</p>
                        <p data-height="616" data-theme-id="0" data-slug-hash="MaXNGd" data-default-tab="result" data-user="Chaosrock" data-embed-version="2" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/Chaosrock/pen/MaXNGd/">Calculator</a> by Josiah (<a href="http://codepen.io/Chaosrock">@Chaosrock</a>) on <a href="http://codepen.io">CodePen</a>.</p>
                    </div>

                    <div class="code-block well row">
                        <h3>Pomodoro Timer</h3>
                        <p>This is a Pomodoro timer app built in JavaScript</p>
                        <p data-height="720" data-theme-id="0" data-slug-hash="xwzoBN" data-default-tab="result" data-user="Chaosrock" data-embed-version="2" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/Chaosrock/pen/xwzoBN/">Pomodoro Timer</a> by Josiah (<a href="http://codepen.io/Chaosrock">@Chaosrock</a>) on <a href="http://codepen.io">CodePen</a>.</p>
                    </div>

                    <div class="code-block well row">
                        <h3>Jack Handey Quote Generator</h3>
                        <p>This toy displays a random Jack Handey quote. If the quote is short enough, there is an option to post it to Twitter.</p>
                        <p data-height="675" data-theme-id="0" data-slug-hash="PPayxM" data-default-tab="result" data-user="Chaosrock" data-embed-version="2" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/Chaosrock/pen/PPayxM/">Jack Handey Quote Generator</a> by Josiah (<a href="http://codepen.io/Chaosrock">@Chaosrock</a>) on <a href="http://codepen.io">CodePen</a>.</p>
                    </div>

                    <div class="code-block well row">
                        <h3>Pseudomorphism TV</h3>
                        <p>This was a fun experiment in creating a realistic object in CSS. It mimics the Blu-ray screensaver.</p>
                        <p data-height="705" data-theme-id="0" data-slug-hash="LNPGVZ" data-default-tab="result" data-user="Chaosrock" data-embed-version="2" data-preview="true" class="codepen">See the Pen <a href="https://codepen.io/Chaosrock/pen/LNPGVZ/">LNPGVZ</a> by Josiah (<a href="http://codepen.io/Chaosrock">@Chaosrock</a>) on <a href="http://codepen.io">CodePen</a>.</p>
                    </div>
                    
                </div>

                <div role="tabpanel" class="tab-pane" id="basic">

                    <div class="tab-header">
                        <p>Many of these basic algorithms are my code solutions from freecodecamp.com.</p>
                        <p><small><em>Note: If you are currently going through the platform at Free Code Camp, please refrain from spoiling it for yourself by reviewing my code solutions.</em></small></p>
                    </div>

                    <div class="code-block well row">
                        <h3>Reverse a String</h3>
                        <div class="col-md-6">
                            <p><strong>Objective</strong></p>
                            <p>Return the given string, reversed.</p>
                            <p><strong>Explanation</strong></p>
                            <p>Since strings are <span class="hover-info" data-hover="Cannot be changed once defined.">immutable</span>, we need to create a new string and return it instead.</p>
                            <p>After creating a new string, we simply run a reverse for loop through the original string, adding each letter as we go backward.</p>
                            <p>After the loop we return the new, reversed string.</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Code</strong></p>
                            <pre>
                                <code class="language-js line-numbers">
                                function reverseString(str) {
                                    var newStr = "";
                                    for (var i = str.length - 1; i >= 0; i--) {
                                        newStr += str[i];
                                    }
                                    return newStr;
                                }
                                </code>
                            </pre>
                            <p><small>My favorite solution is in Python:</small></p>
                            <pre>
                                <code class="language-python line-numbers">
                                    def reverse_string(str):
                                        return str[::-1]
                                </code>
                            </pre>
                        </div>
                        <div class="try-it col-md-12">
                            <p><small><em>Try it Yourself!</em></small></p>
                            <div class="col-md-6">
                                <div class="input-group">
                                    <input type="text" placeholder="Input" class="form-control" id="reverse_string_input">
                                    <span class="input-group-btn">
                                        <button class="btn btn-default" id="reverse_string" type="button">Go</button>
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <input type="text" placeholder="Output" class="form-control" id="reverse_string_output">
                            </div>
                            <script>
                                $('#reverse_string').click(function() {
                                    $('#reverse_string_output').val(reverseString($('#reverse_string_input').val()));
                                    $('#reverse_string_input').val('');
                                })
                            </script>
                        </div>
                    </div><!-- .code-block -->


                    <div class="code-block well row">
                        <h3>Check if String is Palindrome</h3>
                        <div class="col-md-6">
                            <p><strong>Objective</strong></p>
                            <p>See if a given string is a palindrome, ignoring whitespace, special characters, &amp; case.</p>
                            <p><strong>Explanation</strong></p>
                            <p>Since we don't care about <span class="hover-info" data-hover="Spaces between words and line breaks">whitespace</span>, special characters, or case, we just need to bring the string to lowercase and remove all whitespace &amp; special characters, then reverse the string and compare it to the original.</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Code</strong></p>
                            <pre>
                                <code class="language-js line-numbers">
                                    function palindrome(str) {
                                        var re = /[\W_]/g;
                                        var lowRegStr = str.toLowerCase().replace(re, '');
                                        var reverseStr = lowRegStr.split('').reverse().join(''); 
                                        return reverseStr === lowRegStr;
                                    }
                                </code>
                            </pre>
                        </div>
                        <div class="try-it col-md-12">
                            <p><small><em>Try it Yourself!</em></small></p>
                            <div class="col-md-6">
                                <div class="input-group">
                                    <input type="text" placeholder="Input" class="form-control" id="check_palindrome_input">
                                    <span class="input-group-btn">
                                        <button class="btn btn-default" id="check_palindrome" type="button">Go</button>
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <input type="text" placeholder="Output" class="form-control" id="check_palindrome_output">
                            </div>
                            <script>
                                $('#check_palindrome').click(function() {
                                    $('#check_palindrome_output').val(palindrome($('#check_palindrome_input').val()));
                                    $('#check_palindrome_input').val('');
                                })
                            </script>
                        </div>
                    </div><!-- .code-block -->


                    <div class="code-block well row">
                        <h3>Find Longest Word</h3>
                        <div class="col-md-6">
                            <p><strong>Objective</strong></p>
                            <p>Return the length of the longest word in a string.</p>
                            <p><strong>Explanation</strong></p>
                            <p>First we split the string into words (splitting on spaces). Then we create a variable for the longest word, set originally to zero.</p>
                            <p>We loop through the array of words, checking each one against the length of the longest. If it is longer, we set the longest to be that word.</p>
                            <p>Finally we return the longest word's length.</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Code</strong></p>
                            <pre>
                                <code class="language-js line-numbers">
                                    function findLongestWord(str) {
                                        var arr = str.split(' ');
                                        var longest = 0;
                                        for (var i = 0; i < arr.length; i++) {
                                            if (arr[i].length > longest) {
                                                longest = arr[i].length;
                                            }
                                        }
                                        return longest;
                                    }
                                </code>
                            </pre>
                        </div>
                        <div class="try-it col-md-12">
                            <p><small><em>Try it Yourself!</em></small></p>
                            <div class="col-md-6">
                                <div class="input-group">
                                    <input type="text" placeholder="Input" class="form-control" id="longest_word_input">
                                    <span class="input-group-btn">
                                        <button class="btn btn-default" id="longest_word" type="button">Go</button>
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <input type="text" placeholder="Output" class="form-control" id="longest_word_output">
                            </div>
                            <script>
                                $('#longest_word').click(function() {
                                    $('#longest_word_output').val(findLongestWord($('#longest_word_input').val()));
                                    $('#longest_word_input').val('');
                                })
                            </script>
                        </div>
                    </div><!-- .code-block -->


                    <div class="code-block well row">
                        <h3>Title Case a Sentence</h3>
                        <div class="col-md-6">
                            <p><strong>Objective</strong></p>
                            <p>Convert a given string to title case (each word capitalized).</p>
                            <p><strong>Explanation</strong></p>
                            <p>First we split the string into an array of words, all set to lowercase. Then we loop through that array with a for loop.</p>
                            <p>For each iteration we set the first letter to uppercase and join it with the rest of the word. If the word is within our "ignore" array, we skip it (unless it is the first or last word.</p>
                            <p>Finally we return the array, joined back into a string.</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Code</strong></p>
                            <pre>
                                <code class="language-js line-numbers">
                                    function titleCase(str) {
                                        var arr = str.toLowerCase().split(' ');
                                        var ignore = ['a','of','the','in','is','at','with','and'];
                                        for (var i = 0; i < arr.length; i++) {
                                            if (ignore.indexOf(arr[i]) != -1 && i > 0 && i < arr.length - 1)
                                                continue;
                                            arr[i] = arr[i][0].toUpperCase() + arr[i].substr(1);
                                        }
                                        arr = arr.join(' ');
                                        return arr;
                                    }
                                </code>
                            </pre>
                        </div>
                        <div class="try-it col-md-12">
                            <p><small><em>Try it Yourself!</em></small></p>
                            <div class="col-md-6">
                                <div class="input-group">
                                    <input type="text" placeholder="Input" class="form-control" id="title_case_input">
                                    <span class="input-group-btn">
                                        <button class="btn btn-default" id="title_case" type="button">Go</button>
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <input type="text" placeholder="Output" class="form-control" id="title_case_output">
                            </div>
                            <script>
                                $('#title_case').click(function() {
                                    $('#title_case_output').val(titleCase($('#title_case_input').val()));
                                    $('#title_case_input').val('');
                                })
                            </script>
                        </div>
                    </div><!-- .code-block -->


                    <div class="code-block well row">
                        <h3>Truncate a String</h3>
                        <div class="col-md-6">
                            <p><strong>Objective</strong></p>
                            <p>Truncate a string using an <span class="hover-info" data-hover="The three dots used to indicate an unfinished thought in writing (eg. '...').">ellipsis</span>.</p>
                            <p><strong>Explanation</strong></p>
                            <p>This algorithm takes in a string and the number of characters you want to truncate after.</p>
                            <p>If the number to truncate is less than 4, we return a new string that is the old string sliced from the first character to the 'num' character with an ellipsis at the end.</p>
                            <p>Otherwise if the string's length is greater than num + 3 (to accommodate for the ellipsis), then we return the string truncated that way.</p>
                            <p>Lastly, if the string's length is less than num + 3, we simply return the string, untruncated.</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Code</strong></p>
                            <pre>
                                <code class="language-js line-numbers">
                                    function truncateString(str, num) {
                                        if (num <= 3) {
                                            return str.slice(0, num) + "...";
                                        } else if (str.length > num + 3) {
                                            return str.slice(0, num - 3) + "...";
                                        }
                                        return str;
                                    }
                                </code>
                            </pre>
                        </div>
                        <div class="try-it col-md-12">
                            <p><small><em>Try it Yourself!</em></small></p>
                            <div class="col-md-6">
                                <div class="input-group">
                                    <div class="col-md-6">
                                        <input type="text" placeholder="Input" class="form-control" id="truncate_string_input">
                                    </div>
                                    <div class="col-md-6">
                                        <input type="text" placeholder="Length" class="form-control" id="truncate_string_length">
                                    </div>
                                    <span class="input-group-btn">
                                        <button class="btn btn-default" id="truncate_string" type="button">Go</button>
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <input type="text" placeholder="Output" class="form-control" id="truncate_string_output">
                            </div>
                            <script>
                                $('#truncate_string').click(function() {
                                    $('#truncate_string_output').val(truncateString($('#truncate_string_input').val(),$('#truncate_string_length').val()));
                                    $('#truncate_string_input').val('');
                                })
                            </script>
                        </div>
                    </div><!-- .code-block -->


                    <div class="code-block well">
                        <h3>MathDojo</h3>
                        <p>A simple Python class for chaining methods</p>
                        <pre>
                            <code class="language-python line-numbers">
                                class MathDojo(object):
                                    def __init__(self, result=0):
                                        self.result = result

                                    def add(self, *rest):
                                        for i in rest:
                                            if type(i) == list or type(i) == tuple:
                                                for n in i:
                                                    self.result += n
                                                    self.result = round(self.result, 2)
                                            else:
                                                self.result += i
                                                self.result = round(self.result, 2)
                                        return self

                                    def subtract(self, *rest):
                                        for i in rest:
                                            if type(i) == list or type(i) == tuple:
                                                for n in i:
                                                    self.result -= n
                                                    self.result = round(self.result, 2)
                                            else:
                                                self.result -= i
                                                self.result = round(self.result, 2)
                                        return self

                                md = MathDojo()
                                print(md.add([1], 3, 4).add([3, 5, 7, 8], [2, 9.3, 1.25]).subtract(2, [2, 3], [1.1, 2.3]).result)
                            </code>
                        </pre>
                    </div><!-- .code-block -->

                </div><!-- .tab-pane -->







                <div role="tabpanel" class="tab-pane" id="intermediate">

                    <div class="code-block well row">
                        <h3>Factorialize a Number</h3>
                        <div class="col-md-6">
                            <p><strong>Objective</strong></p>
                            <p>Return the factorial of a given number.</p>
                            <p><strong>Explanation</strong></p>
                            <p>This function uses recursion to return the factorial of a number.</p>
                            <p>The base case returns when the number passed is less than 2. When the number passed is greater than 2, it passes the number minus 1 as an argument to the recursive function.</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Code</strong></p>
                            <pre>
                                <code class="language-js line-numbers">
                                    function factorialize(num) {
                                        if (num <= 1){
                                            return 1;
                                        } else {
                                            return num * factorialize(num - 1);
                                        }
                                    }
                                </code>
                            </pre>
                        </div>
                        <div class="try-it col-md-12">
                            <p><small><em>Try it Yourself!</em></small></p>
                            <div class="col-md-6">
                                <div class="input-group">
                                    <input type="text" placeholder="Input" class="form-control" id="factorialize_input">
                                    <span class="input-group-btn">
                                        <button class="btn btn-default" id="factorialize" type="button">Go</button>
                                    </span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <input type="text" placeholder="Output" class="form-control" id="factorialize_output">
                            </div>
                            <script>
                                $('#factorialize').click(function() {
                                    $('#factorialize_output').val(factorialize($('#factorialize_input').val()));
                                    $('#factorialize_input').val('');
                                })
                            </script>
                        </div>
                    </div><!-- .code-block -->


                    <div class="code-block well row">
                        <h3>Find Triangle Number With N Factors</h3>
                        <div class="col-md-6">
                            <p><strong>Objective</strong></p>
                            <p>Return the triangle number that has N factors.</p>
                            <p><strong>Explanation</strong></p>
                            <p>In this algorithm we want to find the <span class="hover-info" data-hover="A triangle number is the sum of the sequence of natural numbers up to it. For instance, the 7th triangle number is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.">triangle number</span> which has N factors. For this we'll need a helper function to generate a triangle number from an input.</p>
                            <p>We create a while loop and continue running until our condition is achieved. Within the while loop we have a for loop that appends each factor of our triangle number to an array. After that we count the number of factors to see if its our desired length.</p>
                            <p>If we have reached our desired length we return that triangle number, otherwise we continue.</p>
                            
                        </div>
                        <div class="col-md-6">
                            <pre>
                                <code class="language-python line-numbers">
                                    def generate_triangle_number(num):
                                        sum = 0
                                        for i in range(1, num + 1):
                                            sum += i
                                        return sum

                                    def find_triangle_number_with_n_factors(length):
                                        i = 1
                                        while(True):
                                            factors = []
                                            triangle = generate_triangle_number(i)
                                            for j in range(1, triangle):
                                                if triangle % j == 0:
                                                    factors.append(j)
                                            if len(factors) >= length:
                                                return triangle
                                            i += 1
                                </code>
                            </pre>
                        </div>
                    </div><!-- .code-block -->


                    <div class="code-block well">
                        <h3>Find Nth Prime Number</h3>
                        <p>Return the Nth prime number based on input.</p>
                        <pre>
                            <code class="language-python line-numbers">
                                import math

                                def is_prime(n):
                                    for i in range(2, int(math.sqrt(n)) + 1):
                                        if n % i == 0:
                                            return False
                                    return True

                                def find_nth_prime(num):
                                    if num <= 2:
                                        return -1
                                    
                                    primes = []
                                    
                                    i = 2
                                    while(len(primes) < num):
                                        if is_prime(i):
                                            primes.append(i)
                                        i += 1
                                    
                                    return primes[-1]
                            </code>
                        </pre>
                    </div>


                    <div class="code-block well">
                        <h3>Sum All Numbers in a Range</h3>
                        <p>Return the sum of all numbers in a range (passed in via an array with two elements).</p>
                        <pre>
                            <code class="language-js line-numbers">
                                function sumAll(arr) {
                                    arr.sort(function(a,b){
                                        return a-b;
                                    });
                                    var sum = 0;
                                    for (var i = arr[0]; i < arr[1]; i++) {
                                        sum += i;
                                    }
                                    sum += arr[1];
                                    return sum;
                                }
                            </code>
                        </pre>
                    </div><!-- .code-block -->


                    <div class="code-block well">
                        <h3>Diff Two Arrays</h3>
                        <p>Return the symmetric difference of the two arrays.</p>
                        <pre>
                            <code class="language-js line-numbers">
                                function diffArray(arr1, arr2) {
                                    var newArr = [];

                                    var arr_1 = arr1.filter(function(val) {
                                        return arr2.indexOf(val) == -1;
                                    });

                                    var arr_2 = arr2.filter(function(val){
                                        return arr1.indexOf(val) == -1;
                                    });

                                    newArr = newArr.concat(arr_1);
                                    newArr = newArr.concat(arr_2);

                                    return newArr;
                                }
                            </code>
                        </pre>
                    </div><!-- .code-block -->


                    <div class="code-block well">
                        <h3>Check if Boolean</h3>
                        <p>Checks if a value is classified as a boolean primitive</p>
                        <pre>
                            <code class="language-js line-numbers">
                                function boolCheck(bool) {
                                    return bool === true || bool === false;
                                }
                            </code>
                        </pre>
                    </div><!-- .code-block -->


                    <div class="code-block well">
                        <h3>Bubble Sort</h3>
                        <p>One of many sorting algorithms.</p>
                        <pre>
                            <code class="language-python line-numbers">
                                def bubble_sort(input_list):
                                    is_sorted = False
                                    while not is_sorted:
                                        is_sorted = True
                                        for (idx, num) in enumerate(input_list):
                                            if idx < len(input_list) - 1:
                                                if input_list[idx] > input_list[idx + 1]:
                                                    input_list[idx], input_list[idx + 1] = input_list[idx + 1], input_list[idx]
                                                    is_sorted = False
                            </code>
                        </pre>
                    </div><!-- .code-block -->


                    <div class="code-block well">
                        <h3>Linked List</h3>
                        <p>A simple linked list implementation in Python</p>
                        <pre>
                            <code class="language-python line-numbers">
                            class Node(object):
                                def __init__(self, d, n=None, p=None):
                                    self.data = d
                                    self.next_node = n
                                    self.prev_node = p

                                def get_next(self):
                                    return self.next_node

                                def set_next(self, n):
                                    self.next_node = n

                                def get_prev(self):
                                    return self.prev_node

                                def set_prev(self, p):
                                    self.prev_node = p

                                def get_data(self):
                                    return self.data

                                def set_data(self, d):
                                    self.data = d


                            class Station(object):
                                def __init__(self, r=None):
                                    self.root = r
                                    self.size = 0

                                def get_size(self):
                                    return self.size

                                def add(self, d):
                                    new_node = Node(d, self.root)
                                    if self.root:
                                        self.root.set_prev(new_node)
                                    self.root = new_node
                                    self.size += 1

                                def remove(self, d):
                                    this_node = self.root

                                    while this_node:
                                        if this_node.get_data() == d:
                                            next = this_node.get_next()
                                            prev = this_node.get_prev()

                                            if next:
                                                next.set_prev(prev)
                                            if prev:
                                                prev.set_next(next)
                                            else:
                                                self.root = this_node
                                            self.size -= 1
                                            return True
                                        else:
                                            this_node = this_node.get_next()
                                    return False

                                def find(self, d):
                                    this_node = self.root
                                    while this_node:
                                        if this_node.get_data() == d:
                                            return d
                                        else:
                                            this_node = this_node.get_next()
                                    return None
                            </code>
                        </pre>
                    </div><!-- .code-block -->

                    








                </div><!-- .tab-pane -->
                






                <div role="tabpanel" class="tab-pane" id="advanced">
                    <div class="tab-header">
                        <p>These are my more advanced algorithms and code examples.</p>
                    </div>

                    <div class="code-block well">
                        <h3>Trie</h3>
                        <p>Tries are used to autocomplete search inputs or to find related elements based on input. A famous example of a trie is in a Google Search. When you begin typing and it lists recommendations below based on the first few letters you've typed.</p>
                        <p><em>Note: This algorithm is not entirely complete and I am still working on completing it, but I wanted to share my progress.</em></p>
                        <pre>
                            <code class="language-python line-numbers">
                                #  Trie: Autocomplete class
                                #  Trie is used to suggest words based on what you are searching for. For instance, if you search for
                                #  "ap", it should display words that start with "ap", such as "ape" or "apple".


                                class Trie(object):
                                    def __init__(self):
                                        self.root = Node('', False)  # create root node
                                        self.current_node = self.root

                                    def add_word(self, inp):
                                        # run hasword first
                                        print("\n#=============================# \n\n\tADD WORD \n\n\tAdding '"+str(inp)+"' to our list")
                                        if not self.has_word(inp):
                                            # see what current node is, that is our starting point
                                            # get length of current node, start for loop there
                                            for i in range(len(self.current_node.value), len(inp)):  # loop through word starting from current node
                                                # iterate from length above to end of len(inp)
                                                # let's say we're adding "apple" and our last node is "ap"
                                                # current_node.value == 'ap'
                                                # range above would be range(2, 5) or "ple"
                                                node = Node(self.current_node.value+inp[i])     # add new node containing "app"
                                                self.current_node.children.append(node)         # add node to current node children
                                                self.current_node = node                        # change current_node to created node
                                                if self.current_node.value == inp:
                                                    print("\n\t"+str(inp)+" added to our node list")
                                                    self.current_node.isword = True
                                                    return True
                                        else:
                                            print("\n\tThe word '"+str(inp)+"' word already exists in our list")
                                            return False

                                    def has_word(self, inp):
                                        self.current_node = self.root
                                        print("\n:-----------------------------: \n\n\tSEARCH WORD \n\n\tSearching for '"+str(inp)+"'")
                                        print("\n\tCurrent node: root node")
                                        for i in range(0, len(inp)):  # loop through word
                                            for child in self.current_node.children:
                                                if inp == child.value:
                                                    self.current_node = child
                                                    print("\tNew current node: " + str(self.current_node.value))
                                                    print("\tFound word!")
                                                    return True
                                                if inp[:i + 1] == child.value:
                                                    self.current_node = child
                                                    print("\tNew current node: " + str(self.current_node.value))
                                                    break
                                        print("\n\tDidn't find word.")
                                        return False

                                    def looker(self, _node):
                                        # loop through all children nodes of this node
                                        for child in _node.children:
                                            # make sure this node has children
                                            if len(child.children) > 0:
                                                # if child is a word
                                                if child.isword:
                                                    print("\n\t- " + child.value)   # print the word
                                                    self.current_node = child       # set current node as this child
                                                    self.looker(self.current_node)  # run function on the new current node

                                    def print_word_starting_with(self, inp):
                                        # find all words starting with "ap"
                                        self.has_word(inp)  # this gets us to the current_node that we need, so "ap"
                                        for child_node in self.current_node.children:
                                            self.looker(child_node)


                                class Node(object):
                                    def __init__(self, value, isword=False):
                                        self.value = value
                                        self.isword = isword
                                        self.children = []

                                # testing

                                trie = Trie()
                                trie.add_word("apple")
                                print(trie.has_word("app"))  # returns True
                            </code>
                        </pre>
                    </div><!-- .code-block -->




                    

                </div><!-- .tab-pane -->

                <div role="tabpanel" class="tab-pane" id="misc">
                
                    <div class="tab-header">
                        <p>This is just silly, impractical, or miscellaneous code.</p>
                    </div>

                    <div class="code-block well">
                        <h3>Bogo Sort</h3>
                        <p>The worst possible sort algorithm. What it does is randomly sorts an array and checks if it is in order. If it isn't, it runs again.</p>
                        <pre>
                            <code class="language-python line-numbers">
                                import random

                                def bogosort(l):
                                    def in_order(l):
                                        if not l:
                                            return True
                                        last = l[0]
                                        for x in l[1:]:
                                            if x < last:
                                                return False
                                            last = x
                                        return True
                                    while not in_order(l):
                                        random.shuffle(l)
                                        print(l)
                                    return l
                            </code>
                        </pre>
                    </div><!-- .code-block -->

                </div><!-- .tab-pane -->

            </div><!-- .code-blocks -->
        
        </div><!-- .container -->

    </div><!-- .code -->

<% include partials/footer %>